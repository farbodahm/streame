// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: pkg/messaging/record.proto

package messaging

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RecordStream_StreamRecords_FullMethodName = "/messaging.RecordStream/StreamRecords"
)

// RecordStreamClient is the client API for RecordStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// RecordStream is the server for sending records from master node to receivers.
type RecordStreamClient interface {
	StreamRecords(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Record], error)
}

type recordStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewRecordStreamClient(cc grpc.ClientConnInterface) RecordStreamClient {
	return &recordStreamClient{cc}
}

func (c *recordStreamClient) StreamRecords(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Record], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RecordStream_ServiceDesc.Streams[0], RecordStream_StreamRecords_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamRequest, Record]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RecordStream_StreamRecordsClient = grpc.ServerStreamingClient[Record]

// RecordStreamServer is the server API for RecordStream service.
// All implementations must embed UnimplementedRecordStreamServer
// for forward compatibility.
//
// RecordStream is the server for sending records from master node to receivers.
type RecordStreamServer interface {
	StreamRecords(*StreamRequest, grpc.ServerStreamingServer[Record]) error
	mustEmbedUnimplementedRecordStreamServer()
}

// UnimplementedRecordStreamServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRecordStreamServer struct{}

func (UnimplementedRecordStreamServer) StreamRecords(*StreamRequest, grpc.ServerStreamingServer[Record]) error {
	return status.Errorf(codes.Unimplemented, "method StreamRecords not implemented")
}
func (UnimplementedRecordStreamServer) mustEmbedUnimplementedRecordStreamServer() {}
func (UnimplementedRecordStreamServer) testEmbeddedByValue()                      {}

// UnsafeRecordStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecordStreamServer will
// result in compilation errors.
type UnsafeRecordStreamServer interface {
	mustEmbedUnimplementedRecordStreamServer()
}

func RegisterRecordStreamServer(s grpc.ServiceRegistrar, srv RecordStreamServer) {
	// If the following call pancis, it indicates UnimplementedRecordStreamServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RecordStream_ServiceDesc, srv)
}

func _RecordStream_StreamRecords_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RecordStreamServer).StreamRecords(m, &grpc.GenericServerStream[StreamRequest, Record]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RecordStream_StreamRecordsServer = grpc.ServerStreamingServer[Record]

// RecordStream_ServiceDesc is the grpc.ServiceDesc for RecordStream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RecordStream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "messaging.RecordStream",
	HandlerType: (*RecordStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamRecords",
			Handler:       _RecordStream_StreamRecords_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/messaging/record.proto",
}
