name: Go Tests and Format

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      run_integration:
        description: "Run integration tests?"
        required: false
        default: "false"

env:
  GO_VERSION: "^1.22.1"

jobs:
  go:
    name: Go ${{ matrix.task }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
    strategy:
      matrix:
        task: [fmt, test, benchmark]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Install environment dependencies
        run: sudo apt install graphviz
      - name: Install Go dependencies
        run: go mod tidy

      - name: Run go fmt
        if: matrix.task == 'fmt'
        run: |
          if [ -n "$(go fmt ./...)" ]; then
            echo "Go files must be formatted with gofmt."
            exit 1
          fi

      - name: Run go test
        if: matrix.task == 'test'
        run: go test -v ./...

      - name: Take benchmarks
        if: matrix.task == 'benchmark'
        run: bash ./benchmarks/take_benchmarks.sh

      - name: Upload benchmark artifacts
        if: matrix.task == 'benchmark'
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-report
          path: benchmarks/*.svg
          retention-days: 30

      - name: Upload benchmark duration as comment
        if: github.event_name == 'pull_request' && matrix.task == 'benchmark'
        uses: thollander/actions-comment-pull-request@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          filePath: benchmark_duration.txt

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: go
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install Docker Compose
        run: sudo apt-get update && sudo apt-get install docker-compose -y

      - name: Start services with Docker Compose
        run: docker-compose -f development.docker-compose.yml up -d --build

      - name: Wait for etcd to be ready
        run: |
          echo "Checking etcd cluster health..."
          for i in {1..10}; do
            if curl -sf http://localhost:2379/health | grep -q '"health":"true"'; then
              echo "etcd is healthy ✅"
              exit 0
            fi
            echo "etcd not ready yet... retrying in 3s"
            sleep 3
          done
          echo "etcd did not become healthy in time ❌"
          exit 1

      - name: Run integration tests
        run: go test -v -tags=integration ./...

      - name: Tear down services
        if: always()
        run: docker-compose -f development.docker-compose.yml down
